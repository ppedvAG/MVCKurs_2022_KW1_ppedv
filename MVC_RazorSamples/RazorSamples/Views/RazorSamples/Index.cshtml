@model IEnumerable<Person>
@using System.Linq;
@{
    ViewData["Title"] = "Index";
}

<p>Was ist Razor?</p>
<p>Ist ein TemplateSystem + Möglichkeiten, wie man Objecte in HTML am besten verwenden kann</p>

<p>Was ist ein Template-System in HTML?</p>
<p>Ein Templatesystem ermöglicht in HTML, Objekte via Platzhalter auszugeben und auch Formulare mit Objekte </p>

<p>Wie wird Razor verwendet-> Erstes Beispiel </p>

<p>Anzahl von Personen @Model.Count()</p>

@*Verwende ein zweites @-Sympol um im RazorMArkup ein @Symbol *@
<p>Ein [AT-]-Zeichen wird hier ausgegeben @@Model.Count</p>


@* 2.)Implizite Razor-Ausdrücke - Implizite Razor-Ausdrücke beginnen mit @ gefolgt von C#-Code: *@
<p>@DateTime.Now</p>
<p>@DateTime.IsLeapYear(2016)</p>

@*3.) Explizite Razor-Ausdrücke  - Explizite Razor-Ausdrücke bestehen aus einem @-Symbol mit ausgeglichener Klammer. *@

<p>Last week this time: @( DateTime.Now - TimeSpan.FromDays(7)  )</p>



@*C#-Codeblöcke in Razor*@
@{
    //Diese Person die hier angelegt wurde, gilt nur auf dieser View
    Person person = new Person("Grimm", 50);

    Person person1 = new Person("Hexe", 150);

}

<p>@person.Name</p>
<p>@person.Age</p>
<p>@person.Email</p>
<p>Age: @person.Name</p>



@*// Razor Page spezifische Möglichkeit eine Methode in der Code-Behind Datei zu erweitern*@
@*@functions {
    //ERweiterung der Code-Behind Datei
    public string GenericMethod<T>()
    {
        return "a type";
    }
}*@


@* 4.2 HtmlHelper.Raw = string in HTML Ausgeben *@

@Html.Raw("<b>Hello World</b>")
@* &lt;span&gt;Hello World&lt;/span&gt; *@


@*Lokale Funktionen *@

@* 5.1Deklarieren Sie in Codeblöcken lokale Funktionen mit Markup als Vorlagenmethoden:*@

@{

    void RenderName(string name)
    {
        <p>Name: <strong>@name</strong></p>
    }

    RenderName("Mahatma Gandhi");
    RenderName("Martin Luther King, Jr.");



}

@functions {
    //ERweiterung der Code-Behind Datei
    public void RenderName2(string name)
    {
        <p>Name: <strong>@name</strong></p>
    }
}

@{
    RenderName("Otto");
}


@* 7.0 Steuerungsstrukturen *@

@foreach (Person currentPerson in Model)
{
    //Wir wollen eine Ausgabe designen
    //Müssen hier expliziet auch wieder sagen, das die Ausgabe in disem Fall eine Variable ist @


    @currentPerson.Name
    <br />
    @currentPerson.Age
    <br />
    <p>--------------------</p>
}


@{

    Person[] peoples = Model.ToArray();

    for (int y = 0; y < Model.Count(); y++)
    {
        Person person2 = peoples[y];
        <p>Name: @person2.Name</p>
        <p>Alter: @person2.Age</p>
    }
}


@* 7.2.3 @while *@
@{var i = 0; }
@while (i < peoples.Length)
{
    var person3 = peoples[i];
    <p>Name: @person3.Name</p>
    <p>Age: @person3.Age</p>

    i++;
}

@* 7.2.4 @do while *@

@{i = 0; }
@do
{
    var person4 = peoples[i];
    <p>Name: @person4.Name</p>
    <p>Age: @person4.Age</p>

    i++;
} while (i < peoples.Length);



@{
    int value = 4;
}



@if (value % 2 == 0)
{
    <p>The value was even.</p>
}


@* 7.1.2 else und else if erfordern kein @-Symbol: *@
@if (value % 2 == 0)
{
    <p>The value was even.</p>
}
else if (value >= 1337)
{
    <p>The value is large.</p>
}
else
{
    <p>The value is odd and small.</p>
}


@*  7.1.3 switch-Anweisung *@
@switch (value)
{
    case 1:
        <p>The value is 1!</p>
        break;
    case 1337:
        <p>Your number is 1337!</p>
        break;
    default:
        <p>Your number wasn't 1 or 1337.</p>
        break;
}


@*Formulare*@

<!-- Formular -->
@using (Html.BeginForm())
{
    <div>
        Email: <input type="email" id="Email" value="">
        <button>Register</button>
    </div>
} //Dispose

<form>
</form>


@* 7.4 @try, catch, finally

*@
@try
{
    throw new InvalidOperationException("You did something invalid.");
}
catch (Exception ex)
{
    <p>The exception message: @ex.Message</p>
}
finally
{
    <p>The finally statement.</p>
}


@* 7.5 @lock *@
@*@lock (obj)
{
    // Do critical section work
}*@

@inject ITimeService service;

@service.CurrentTime();





@section Scripts {
    

    <script>
        $(document).ready(function () {
            alert("Test");
        });
    </script>

    @*<script type="text/javascript" src="~/scripts/main.js"></script>*@
}
